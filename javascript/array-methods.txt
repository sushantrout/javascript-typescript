from
--------------------
Array.from("SUSHANT") //["S","U","S","H","A","N","T"]
Array.from([1,2,3,4,5]) // [1,2,3,4,5]
Array.from([1,2,3,4,5], n => n * 2) //[2,4,6,8,10]
Array.from([1,2,3,4,5], (x, i) => x + i)// [1, 3, 5, 7, 9]

isArray
----------------------
Array.isArray([1]);

of
----------------------
The Array.of() method creates a new Array instance from a variable number 
of arguments, regardless of number or type of the arguments.

Array.of(7); // [7]
Array(7); // array of 7 empty slots

Array.of(1, 2, 3); // [1, 2, 3]
Array(1, 2, 3);    // [1, 2, 3]


length
--------------------------------
const clothing = ['shoes', 'shirts', 'socks', 'sweaters'];

console.log(clothing.length);

at
-------------------------
The at() method takes an integer value and returns the item at that index,
allowing for positive and negative integers. Negative integers count back 
from the last item in the array.

array[array.length-1] for the last item, you can call array.at(-1).

concat
-------------------------
The concat() method is used to merge two or more arrays. This method does 
not change the existing arrays, but instead returns a new array.

concat()
concat(value0)
concat(value0, value1)
concat(value0, value1, /* … ,*/ valueN)

const array1 = ['a', 'b', 'c'];
const array2 = ['d', 'e', 'f'];
const array3 = array1.concat(array2);

console.log(array3);
// expected output: Array ["a", "b", "c", "d", "e", "f"]

const num1 = [1, 2, 3];
const num2 = [4, 5, 6];
const num3 = [7, 8, 9];

const numbers = num1.concat(num2, num3);

console.log(numbers);
// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]


const array1 = ['a', 'b', 'c', 'd', 'e'];

copyWithin
-------------------------
The copyWithin() method shallow copies part of an array to another location
in the same array and returns it without modifying its length.


copyWithin(target)
copyWithin(target, start)
copyWithin(target, start, end)

target
Zero-based index at which to copy the sequence to. If negative, target will be counted from the end.

If target is at or greater than arr.length, nothing will be copied. If 
target is positioned after start, the copied sequence will be trimmed to 
fit arr.length.

start Optional
Zero-based index at which to start copying elements from. If negative, 
start will be counted from the end.

If start is omitted, copyWithin will copy from index 0.

end Optional
Zero-based index at which to end copying elements from. copyWithin copies 
up to but not including end. If negative, end will be counted from the end.

If end is omitted, copyWithin will copy until the last index 
(default to arr.length).


const array1 = ['a', 'b', 'c', 'd', 'e'];
// copy to index 0 the element at index 3
console.log(array1.copyWithin(0, 3, 4));
// expected output: Array ["d", "b", "c", "d", "e"]

// copy to index 1 all elements from index 3 to the end
console.log(array1.copyWithin(1, 3));
// expected output: Array ["d", "d", "e", "d", "e"]

console.log([1, 2, 3, 4, 5].copyWithin(-2));
// [1, 2, 3, 1, 2]

console.log([1, 2, 3, 4, 5].copyWithin(0, 3));
// [4, 5, 3, 4, 5]

console.log([1, 2, 3, 4, 5].copyWithin(0, 3, 4));
// [4, 2, 3, 4, 5]

console.log([1, 2, 3, 4, 5].copyWithin(-2, -3, -1));
// [1, 2, 3, 3, 4]

console.log([].copyWithin.call({length: 5, 3: 1}, 0, 3));
// {0: 1, 3: 1, length: 5}



entries()
-----------------
The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in 
the array.


const array1 = ['a', 'b', 'c'];

const iterator1 = array1.entries();

console.log(iterator1.next().value);
// expected output: Array [0, "a"]

console.log(iterator1.next().value);
// expected output: Array [1, "b"]

const a = ["a", "b", "c"];

for (const [index, element] of a.entries()) {
  console.log(index, element);
}

every()
------------------
The every() method tests whether all elements in the array pass the test implemented by the provided function. 
It returns a Boolean value.


const isBelowThreshold = (currentValue) => currentValue < 40;
const array1 = [1, 30, 39, 29, 10, 13];
console.log(array1.every(isBelowThreshold));
// expected output: true


const isSubset = (array1, array2) => array2.every((element) => array1.includes(element));

console.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 7, 6])); // true
console.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 8, 7])); // false

fill()
------------------------
The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end
 index (default array.length). It returns the modified array.

const array1 = [1, 2, 3, 4];

// fill with 0 from position 2 until position 4
console.log(array1.fill(0, 2, 4));
// expected output: [1, 2, 0, 0]

// fill with 5 from position 1
console.log(array1.fill(5, 1));
// expected output: [1, 5, 5, 5]

console.log(array1.fill(6));
// expected output: [6, 6, 6, 6]

filter()
-----------------------
The filter() method creates a shallow copy of a portion of a given array, filtered down to just the elements from 
the given array that pass the test implemented by the provided function.

const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
const result = words.filter(word => word.length > 6);

console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]


find()/ findIndex()/ findLast()/ findLastIndexOf()
--------------------------------------------------

The find() method returns the first element in the provided array that satisfies the provided testing function.
 If no values satisfy the testing function, undefined is returned.


const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);


flat()
------------------
The flat() method creates a new array with all sub-array elements concatenated into it recursively up 
to the specified depth.


flat()
flat(depth)

const arr1 = [0, 1, 2, [3, 4]];

console.log(arr1.flat());
// expected output: [0, 1, 2, 3, 4]

const arr2 = [0, 1, 2, [[[3, 4]]]];

console.log(arr2.flat(2));
// expected output: [0, 1, 2, [3, 4]]

flatMap
-------------
The flatMap() method returns a new array formed by applying a given callback function to each element of the array,
 and then flattening the result by one level. It is identical to a map() followed by a flat() of depth 1 
(arr.map(...args).flat()), but slightly more efficient than calling those two methods separately.

const arr1 = [1, 2, [3], [4, 5], 6, []];

const flattened = arr1.flatMap(num => num);

console.log(flattened);
// expected output: Array [1, 2, 3, 4, 5, 6]


forEach
------------------
The forEach() method executes a provided function once for each array element.

const array1 = ['a', 'b', 'c'];
array1.forEach(element => console.log(element));

// expected output: "a"
// expected output: "b"
// expected output: "c"

group()
-----------------------
The group() method groups the elements of the calling array according to the string values returned by a 
provided testing function. The returned object has separate properties for each group, containing arrays with 
the elements in the group.

const inventory = [
  { name: 'asparagus', type: 'vegetables', quantity: 5 },
  { name: 'bananas',  type: 'fruit', quantity: 0 },
  { name: 'goat', type: 'meat', quantity: 23 },
  { name: 'cherries', type: 'fruit', quantity: 5 },
  { name: 'fish', type: 'meat', quantity: 22 }
];

const result = inventory.group(({ type }) => type);

groupToMap()
-------------------------
The groupToMap() method groups the elements of the calling array using the values returned by a provided testing 
function. The final returned Map uses the unique values from the test function as keys, which can be used to get 
the array of elements in each group.

const result = inventory.groupToMap(({ quantity }) => quantity < 6 ? restock : sufficient);

includes()
-------------------------
The includes() method determines whether an array includes a certain value among its entries, returning true or 
false as appropriate.


includes(searchElement)
includes(searchElement, fromIndex)

const array1 = [1, 2, 3];

console.log(array1.includes(2));
// expected output: true

const pets = ['cat', 'dog', 'bat'];

console.log(pets.includes('cat'));
// expected output: true

console.log(pets.includes('at'));
// expected output: false


indexOf()
-------------------------
The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it 
is not present.

const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];

console.log(beasts.indexOf('bison'));
// expected output: 1

join()
---------------------------
The join() method creates and returns a new string by concatenating all of the elements in an array 
(or an array-like object), separated by commas or a specified separator string. If the array has only one item,
 then that item will be returned without using the separator.

join()
join(separator)

const elements = ['Fire', 'Air', 'Water'];
console.log(elements.join());
// expected output: "Fire,Air,Water"

console.log(elements.join(''));
// expected output: "FireAirWater"

console.log(elements.join('-'));
// expected output: "Fire-Air-Water"

keys()
---------------------------------
The keys() method returns a new Array Iterator object that contains the keys for each index in the array.

const array1 = ['a', 'b', 'c'];
const iterator = array1.keys();

for (const key of iterator) {
  console.log(key);
}

// expected output: 0
// expected output: 1
// expected output: 2

lastIndexOf()
The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched 
backwards, starting at fromIndex.

lastIndexOf(searchElement)
lastIndexOf(searchElement, fromIndex)

const animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];

console.log(animals.lastIndexOf('Dodo'));
// expected output: 3

console.log(animals.lastIndexOf('Tiger'));
// expected output: 1


map()
---------------------
The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.


const array1 = [1, 4, 9, 16];

// pass a function to map
const map1 = array1.map(x => x * 2);

console.log(map1);
// expected output: Array [2, 8, 18, 32]


pop()
------------------
The pop() method removes the last element from an array and returns that element. This method changes the length of the array.


const plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];

console.log(plants.pop());
// expected output: "tomato"

console.log(plants);
// expected output: Array ["broccoli", "cauliflower", "cabbage", "kale"]

plants.pop();

console.log(plants);
// expected output: Array ["broccoli", "cauliflower", "cabbage"]


push()
-----------------------
The push() method adds one or more elements to the end of an array and returns the new length of the array.

push(element0)
push(element0, element1)
push(element0, element1, /* … ,*/ elementN)

const animals = ['pigs', 'goats', 'sheep'];

const count = animals.push('cows');
console.log(count);
// expected output: 4
console.log(animals);
// expected output: Array ["pigs", "goats", "sheep", "cows"]

animals.push('chickens', 'cats', 'dogs');
console.log(animals);
// expected output: Array ["pigs", "goats", "sheep", "cows", "chickens", "cats", "dogs"]


reduce()
---------------------
The reduce() method executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the 
calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.

The first time that the callback is run there is no "return value of the previous calculation". If supplied, an initial value may be used in its place. 
Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).

Perhaps the easiest-to-understand case for reduce() is to return the sum of all the elements in an array:

const array1 = [1, 2, 3, 4];

// 0 + 1 + 2 + 3 + 4
const initialValue = 0;
const sumWithInitial = array1.reduce(
  (previousValue, currentValue) => previousValue + currentValue,
  initialValue
);

console.log(sumWithInitial);
// expected output: 10

#OR Real time example
let data = {
    "a" : {
        "b": {
            "c": {
                "name": "sushant kumar rout"
            }
        }
    }
}

const properties = ['a', 'b', 'c', , 'name'];

const ans = properties.reduce((value, key) => {
    return value[key]
}, data);
console.log(ans); //sushant kumar rout



reduceRight()
--------------------------
The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.

const array1 = [[0, 1], [2, 3], [4, 5]];

const result = array1.reduceRight((accumulator, currentValue) => accumulator.concat(currentValue));

console.log(result);
// expected output: Array [4, 5, 2, 3, 0, 1]



reverse()
-----------------------------
The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.

const array1 = ['one', 'two', 'three'];
console.log('array1:', array1);
// expected output: "array1:" Array ["one", "two", "three"]

const reversed = array1.reverse();
console.log('reversed:', reversed);
// expected output: "reversed:" Array ["three", "two", "one"]

// Careful: reverse is destructive -- it changes the original array.
console.log('array1:', array1);
// expected output: "array1:" Array ["three", "two", "one"]

shift()
------------------------
The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.

const array1 = [1, 2, 3];

const firstElement = array1.shift();

console.log(array1);
// expected output: Array [2, 3]

console.log(firstElement);
// expected output: 1


slice()
-------------------------
The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) 
where start and end represent the index of items in that array. The original array will not be modified.

slice()
slice(start)
slice(start, end)

some()
-----------------------
The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, 
in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.

const array = [1, 2, 3, 4, 5];

// checks whether an element is even
const even = (element) => element % 2 === 0;

console.log(array.some(even));
// expected output: true


sort()
----------------------------
The sort() method sorts the elements of an array in place and returns the reference to the same array, now sorted. The default sort order is ascending,
 built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.

// Functionless
sort()
// Arrow function
sort((a, b) => { /* … */ } )
// Compare function
sort(compareFn)
// Inline compare function
sort(function compareFn(a, b) { /* … */ })

const months = ['March', 'Jan', 'Feb', 'Dec'];
months.sort();
console.log(months);
// expected output: Array ["Dec", "Feb", "Jan", "March"]

const array1 = [1, 30, 4, 21, 100000];
array1.sort();
console.log(array1);
// expected output: Array [1, 100000, 21, 30, 4]

splice()
------------------
The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place. 
To access part of an array without modifying it, see slice().


splice(start)
splice(start, deleteCount)
splice(start, deleteCount, item1)
splice(start, deleteCount, item1, item2, itemN)

const months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
// inserts at index 1
console.log(months);
// expected output: Array ["Jan", "Feb", "March", "April", "June"]

months.splice(4, 1, 'May');
// replaces 1 element at index 4
console.log(months);
// expected output: Array ["Jan", "Feb", "March", "April", "May"]

unshift()
-----------------------------
The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.

unshift(element0)
unshift(element0, element1)
unshift(element0, element1, /* … ,*/ elementN)

const array1 = [1, 2, 3];

console.log(array1.unshift(4, 5));
// expected output: 5

console.log(array1);
// expected output: Array [4, 5, 1, 2, 3]


let arr = [4, 5, 6]

arr.unshift(1, 2, 3)
console.log(arr);
// [1, 2, 3, 4, 5, 6]


values()
----------------

The values() method returns a new array iterator object that contains the values for each index in the array.


const array1 = ['a', 'b', 'c'];
const iterator = array1.values();

for (const value of iterator) {
  console.log(value);
}

// expected output: "a"
// expected output: "b"
// expected output: "c"
